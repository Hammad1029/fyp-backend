generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://admin:root@localhost:5432/fyp?schema=public"
}

model Permissions {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  RolePermissions RolePermissions[]
}

model Roles {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  RolePermissions RolePermissions[]
  Admins          Admins[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model RolePermissions {
  permission   Permissions @relation(fields: [permissionId], references: [id])
  permissionId Int
  role         Roles       @relation(fields: [roleId], references: [id])
  roleId       Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@id([permissionId, roleId])
}

model Admins {
  id            Int         @id @default(autoincrement())
  name          String
  email         String      @unique
  password      String
  token         String
  role          Roles       @relation(fields: [roleId], references: [id])
  roleId        Int
  institution   Institution @relation(fields: [institutionId], references: [id])
  institutionId Int         @map("institutionId")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Institution {
  id                Int                 @id @default(autoincrement())
  name              String
  email             String              @unique
  logo              String
  Admins            Admins[]
  type              InstitutionTypes    @relation(fields: [typeId], references: [id])
  typeId            Int
  Game              Game[]
  PlayerInstitution PlayerInstitution[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@map("Institution")
}

model InstitutionTypes {
  id   Int    @id @default(autoincrement())
  type String

  Institution Institution[]
}

model Question {
  id           Int            @id @default(autoincrement())
  content      String
  time         Int
  difficulty   Difficulty     @default(MEDIUM)
  Answer       Answer[]
  type         QuestionType   @default(TEXT)
  GameQuestion GameQuestion[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum QuestionType {
  TEXT
  IMAGE
  AUDIO
}

model Answer {
  id         Int      @id @default(autoincrement())
  content    String
  correct    Boolean
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Game {
  id            Int            @id @default(autoincrement())
  name          String
  institutionId Int            @map("institutionId")
  institution   Institution    @relation(fields: [institutionId], references: [id])
  tags          String[]
  time          Int
  GameQuestion  GameQuestion[]
  giveQuestions Int
  Attempt       Attempt[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model GameQuestion {
  game       Game     @relation(fields: [gameId], references: [id])
  gameId     Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([gameId, questionId])
}

model Player {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  password          String
  token             String
  displayName       String
  profilePhoto      String
  PlayerInstitution PlayerInstitution[]
  Attempt           Attempt[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model PlayerInstitution {
  player        Player      @relation(fields: [playerId], references: [id])
  playerId      Int
  institution   Institution @relation(fields: [institutionId], references: [id])
  institutionId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@id([playerId, institutionId])
  @@map("PlayerInstitution")
}

model Attempt {
  id        Int      @id @default(autoincrement())
  player    Player   @relation(fields: [playerId], references: [id])
  playerId  Int
  game      Game     @relation(fields: [gameId], references: [id])
  gameId    Int
  timeTaken Int
  stats     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
