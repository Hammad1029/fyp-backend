{"version":3,"sources":["../index.ts","../routes/index.ts","../routes/admin/index.ts","../utils/constants.ts","../utils/prisma.ts","../utils/utils.ts","../controllers/admin/auth.ts","../routes/admin/auth.ts","../controllers/admin/roles.ts","../routes/admin/roles.ts","../controllers/admin/users.ts","../utils/email.ts","../routes/admin/user.ts","../controllers/admin/institution.ts","../routes/admin/institution.ts","../controllers/admin/questions.ts","../routes/admin/questions.ts","../controllers/admin/game.ts","../routes/admin/game.ts","../routes/player/index.ts","../controllers/player/auth.ts","../routes/player/auth.ts","../utils/passport.ts","../utils/constants.ts"],"sourcesContent":["import express from \"express\";\nimport appRouter from \"./routes/index.js\";\nimport passport from \"passport\";\nimport \"@/utils/passport.js\";\nimport session from \"express-session\";\nimport * as constants from \"@/utils/constants.js\";\nimport cors from \"cors\";\n\nconst app = express();\n\napp.set(\"trust proxy\", 1);\n\napp.use(\n  session({\n    secret: constants.env.sessionSecret,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: 24 * 60 * 60 * 1000,\n    },\n  })\n);\n\nconst port = constants.env.port;\napp.use(cors());\napp.use(express.json());\napp.use(passport.initialize());\napp.use(passport.session());\n\napp.use((req, res, next) => {\n  if (!req.session) res.status(401);\n  else next();\n});\n\napp.use(appRouter);\n\napp.listen(port, (e) => {\n  if (e) console.error(e);\n  else console.log(`Server running on port: ${port}`);\n});\n","import { Router } from \"express\";\nimport adminRouter from \"./admin/index\";\nimport playerRouter from \"./player/index\";\n\nconst appRouter = Router();\n\nappRouter.use(\"/admin\", adminRouter);\nappRouter.use(\"/player\", playerRouter);\n\nexport default appRouter;\n","import { Router } from \"express\";\nimport authRouter from \"./auth\";\nimport roleRouter from \"./roles\";\nimport userRouter from \"./user\";\nimport institutionRouter from \"./institution\";\nimport questionRouter from \"./questions\";\nimport gameRouter from \"./game\";\n\nconst adminRouter = Router();\n\nadminRouter.use(\"/auth/\", authRouter);\nadminRouter.use(\"/roles/\", roleRouter);\nadminRouter.use(\"/users/\", userRouter);\nadminRouter.use(\"/institutions/\", institutionRouter);\nadminRouter.use(\"/questions/\", questionRouter);\nadminRouter.use(\"/games/\", gameRouter);\n\nexport default adminRouter;\n","export const passport = {\n  admin: \"admin-jwt\",\n  player: \"player-jwt\",\n};\n\nexport const env = {\n  jwtSecret: process.env.JWT_SECRET || \"oooo\",\n  sessionSecret: process.env.SESSION_SECRET || \"oooo\",\n  port: process.env.PORT || 3001\n};\n\nexport const defaultPassword = process.env.DEFAULT_PASSWORD || \"hello123\"\nexport const bcryptRounds = 10\n","import { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport default prisma;\n","import prisma from \"@/utils/prisma\";\nimport { Response } from \"express\";\n\nexport const responseHandler = (\n  res: Response,\n  status: boolean,\n  message: string,\n  data?: Record<string, any>,\n  error?: unknown\n) => {\n  if (error) {\n    console.error(error);\n    res.status(500).json({ status: false, message: \"Internal Server Error\" });\n  } else {\n    res.status(200).json({ status, message, data });\n  }\n};\n\nexport const createRandomString = (length: number) => {\n  let result = \"\";\n  const characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  const charactersLength = characters.length;\n  let counter = 0;\n  while (counter < length) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    counter += 1;\n  }\n  return result;\n};\n\nexport const calculateStats = async (\n  playerId: number,\n  excludeAttempt: number\n): Promise<Record<string, number>> => {\n  const sums = await prisma.attemptDetails.aggregate({\n    where: {\n      attempt: { playerId },\n      attemptId: { not: excludeAttempt },\n    },\n    _sum: {\n      easyTotal: true,\n      easyCorrect: true,\n      midTotal: true,\n      midCorrect: true,\n      mediumTotal: true,\n      mediumCorrect: true,\n      hardTotal: true,\n      hardCorrect: true,\n      advancedTotal: true,\n      advancedCorrect: true,\n      exceptionalTotal: true,\n      exceptionalCorrect: true,\n      textualTotal: true,\n      textualCorrect: true,\n      imageTotal: true,\n      imageCorrect: true,\n      auditoryTotal: true,\n      auditoryCorrect: true,\n    },\n  });\n\n  const pct = (correct: number | null, total: number | null) =>\n    (total || 0) > 0 ? (correct || 0) / (total || 0) : 0;\n\n  return {\n    easyPerc: pct(sums._sum.easyCorrect, sums._sum.easyTotal),\n    midPerc: pct(sums._sum.midCorrect, sums._sum.midTotal),\n    mediumPerc: pct(sums._sum.mediumCorrect, sums._sum.mediumTotal),\n    hardPerc: pct(sums._sum.hardCorrect, sums._sum.hardTotal),\n    advancedPerc: pct(sums._sum.advancedCorrect, sums._sum.advancedTotal),\n    exceptionalPerc: pct(\n      sums._sum.exceptionalCorrect,\n      sums._sum.exceptionalTotal\n    ),\n    textualPerc: pct(sums._sum.textualCorrect, sums._sum.textualTotal),\n    imagePerc: pct(sums._sum.imageCorrect, sums._sum.imageTotal),\n    auditoryPerc: pct(sums._sum.auditoryCorrect, sums._sum.auditoryTotal),\n  };\n};\n","import * as constants from \"@/utils/constants\";\nimport prisma from \"@/utils/prisma\";\nimport { responseHandler } from \"@/utils/utils\";\nimport bcrypt from \"bcrypt\";\nimport { Request, RequestHandler, Response } from \"express\";\nimport jwt from \"jsonwebtoken\";\n\nexport const signIn: RequestHandler = async (req: Request, res: Response) => {\n  try {\n    const user = await prisma.admins.findFirst({\n      where: { email: req.body.email },\n      include: {\n        role: {\n          include: { RolePermissions: { include: { permission: true } } },\n        },\n      },\n    });\n    if (!user) return responseHandler(res, false, \"user not found\");\n\n    const authenticated = await bcrypt.compare(\n      req.body.password,\n      user.password\n    );\n    if (!authenticated) return responseHandler(res, false, \"invalid password\");\n\n    const token = jwt.sign({ email: user.email }, constants.env.jwtSecret, {\n      subject: String(user.id),\n    });\n\n    await prisma.admins.update({\n      where: {\n        id: user.id,\n      },\n      data: {\n        token,\n      },\n    });\n\n    responseHandler(res, true, \"Successful\", { token, user });\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const signOut: RequestHandler = async (req: Request, res: Response) => {\n  try {\n    await prisma.admins.update({\n      where: {\n        id: req.user?.data?.id,\n      },\n      data: {\n        token: \"\",\n      },\n    });\n\n    let err = null;\n    req.logout((e) => (err = e));\n\n    if (err) throw err;\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n","import * as controllers from \"@/controllers/admin/auth\";\nimport * as constants from \"@/utils/constants\";\nimport { Router } from \"express\";\nimport passport from \"passport\";\n\nconst authRouter = Router();\n\nauthRouter.post(\"/sign-in\", controllers.signIn);\nauthRouter.get(\n  \"/sign-out\",\n  passport.authenticate(constants.passport.admin),\n  controllers.signOut\n);\n\nexport default authRouter;\n","import prisma from \"@/utils/prisma\";\nimport { responseHandler } from \"@/utils/utils\";\nimport { Permissions } from \"@prisma/client\";\nimport { Request, RequestHandler, Response } from \"express\";\n\nexport const getRoles: RequestHandler = async (req: Request, res: Response) => {\n  try {\n    const roles = await prisma.roles.findMany({\n      include: { Admins: true, RolePermissions: true },\n    });\n    responseHandler(res, true, \"Successful\", roles);\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const createRole: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const foundPermissions = await prisma.permissions.findMany({\n      where: {\n        id: {\n          in: req.body.permissions,\n        },\n      },\n    });\n    if (\n      !foundPermissions ||\n      foundPermissions.length !== req.body.permissions.length\n    )\n      return responseHandler(res, false, \"permissions not found\");\n\n    const createLinks = req.body.permissions.map((p: Permissions) => ({\n      permissionId: p,\n    }));\n    await prisma.roles.create({\n      data: {\n        name: req.body.name,\n        RolePermissions: {\n          create: createLinks,\n        },\n      },\n    });\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const updateRole: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const role = await prisma.roles.findFirst({\n      where: {\n        id: req.body.role_id,\n      },\n    });\n    if (!role) return responseHandler(res, false, \"role not found\");\n\n    if (req.body.name !== role.name) {\n      const roleNameExists = await prisma.roles.findMany({\n        where: { name: req.body.name },\n      });\n      if (roleNameExists.length > 0)\n        return responseHandler(\n          res,\n          false,\n          `role with name ${req.body.name} already exists`\n        );\n\n      await prisma.roles.update({\n        data: {\n          name: req.body.name,\n        },\n        where: { id: role.id },\n      });\n    }\n    \n    await prisma.rolePermissions.deleteMany({ where: { roleId: role.id } });\n    await prisma.rolePermissions.createMany({\n      data: req.body.permissions.map((p: number) => ({\n        roleId: role.id,\n        permissionId: p,\n      })),\n    });\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const deleteRole: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const role = await prisma.roles.findFirst({\n      where: {\n        id: req.body.role_id,\n      },\n    });\n    if (!role) return responseHandler(res, false, \"role not found \");\n\n    await prisma.rolePermissions.deleteMany({ where: { roleId: role.id } });\n    await prisma.roles.delete({ where: { id: role.id } });\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const getPermissions: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const permissions = await prisma.permissions.findMany();\n    responseHandler(res, true, \"Successful\", permissions);\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n","import * as controllers from \"@/controllers/admin/roles\";\nimport { Router } from \"express\";\nimport passport from \"passport\";\nimport * as constants from \"@/utils/constants\"\n\nconst roleRouter = Router();\n\nroleRouter.get(\n  \"/\",\n  passport.authenticate(constants.passport.admin),\n  controllers.getRoles\n);\n\nroleRouter.put(\n  \"/\",\n  passport.authenticate(constants.passport.admin),\n  controllers.updateRole\n);\n\nroleRouter.post(\n  \"/\",\n  passport.authenticate(constants.passport.admin),\n  controllers.createRole\n);\n\nroleRouter.delete(\n  \"/\",\n  passport.authenticate(constants.passport.admin),\n  controllers.deleteRole\n);\n\nroleRouter.get(\n  \"/permissions\",\n  passport.authenticate(constants.passport.admin),\n  controllers.getPermissions\n)\n\nexport default roleRouter;\n","import prisma from \"@/utils/prisma\";\nimport { createRandomString, responseHandler } from \"@/utils/utils\";\nimport { Request, RequestHandler, Response } from \"express\";\nimport bcrypt from \"bcrypt\";\nimport { bcryptRounds, defaultPassword } from \"@/utils/constants\";\nimport sendEmail from \"@/utils/email\";\n\nexport const getUsers: RequestHandler = async (req: Request, res: Response) => {\n  try {\n    const users = await prisma.admins.findMany({\n      include: { institution: true, role: true },\n    });\n    responseHandler(res, true, \"Successful\", users);\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const createUser: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const foundRole = await prisma.roles.findFirst({\n      where: {\n        id: req.body.roleId,\n      },\n    });\n    if (!foundRole) return responseHandler(res, false, \"role not found\");\n\n    const foundInstitution = await prisma.institution.findFirst({\n      where: {\n        id: req.body.institutionId,\n      },\n    });\n    if (!foundInstitution)\n      return responseHandler(res, false, \"institution not found\");\n\n    const newPassword = createRandomString(8);\n    const password = await bcrypt.hash(newPassword, bcryptRounds);\n\n    await prisma.admins.create({\n      data: {\n        name: req.body.name,\n        email: req.body.email,\n        password,\n        institutionId: foundInstitution.id,\n        roleId: foundRole.id,\n        token: \"\",\n      },\n    });\n\n    const mailError = await sendEmail({\n      to: [req.body.email],\n      subject: `Welcome to mindtrack ${req.body.name}`,\n      body: `<ul style=\"line-height: 1.6;\">\n              <li><strong>Name:</strong> ${req.body.name}</li>\n              <li><strong>Email:</strong> ${req.body.email}</li>\n              <li><strong>Password:</stronz> ${newPassword}</li>\n              <li><strong>Institution:</strong> ${foundInstitution.name}</li>\n              <li><strong>Role:</strong> ${foundRole.name}</li>\n            </ul>`,\n    });\n    if (mailError) throw new Error(mailError);\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const updateUser: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const user = await prisma.admins.findFirst({\n      where: {\n        id: req.body.id,\n      },\n    });\n    if (!user) return responseHandler(res, false, \"user not found\");\n\n    const foundRole = await prisma.permissions.findFirst({\n      where: {\n        id: req.body.role_id,\n      },\n    });\n    if (!foundRole) return responseHandler(res, false, \"role not found\");\n\n    const foundInstitution = await prisma.institution.findFirst({\n      where: {\n        id: req.body.institutionId,\n      },\n    });\n    if (!foundInstitution)\n      return responseHandler(res, false, \"institution not found\");\n\n    await prisma.admins.update({\n      data: {\n        name: req.body.name,\n        email: req.body.email,\n        institutionId: foundInstitution.id,\n        roleId: foundRole.id,\n      },\n      where: {\n        id: user.id,\n      },\n    });\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const deleteUser: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const user = await prisma.admins.findFirst({\n      where: {\n        id: req.body.user_id,\n      },\n    });\n    if (!user || !req.body.user_id)\n      return responseHandler(res, false, \"user not found\");\n\n    await prisma.admins.delete({ where: { id: req.body.user_id } });\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};","import nodemailer from \"nodemailer\";\n\nconst senderEmail = process.env.NODEMAILER_EMAIL;\nconst senderPassword = process.env.NODEMAILER_PASSWORD;\n\nconst transporter = nodemailer.createTransport({\n  host: \"smtp.office365.com\",\n  port: 587,\n  secure: false,\n  auth: {\n    user: senderEmail,\n    pass: senderPassword,\n  },\n});\n\ninterface emailParams {\n  to: string[];\n  subject: string;\n  body: string;\n}\n\nconst sendEmail = async (params: emailParams): Promise<string | null> => {\n  try {\n    if (params.to.length === 0) return null;\n    const verified = await transporter.verify();\n    if (verified) {\n      const email = await transporter.sendMail({\n        from: senderEmail,\n        to: params.to.join(\",\"),\n        subject: params.subject,\n        html: params.body,\n      });\n      return null;\n    } else throw Error(\"SMTP connection could not be verified\");\n  } catch (e) {\n    return String(e);\n  }\n};\n\nexport default sendEmail;\n","import * as controllers from \"@/controllers/admin/users\";\nimport { Router } from \"express\";\nimport passport from \"passport\";\nimport * as constants from \"@/utils/constants\";\n\nconst userRouter = Router();\n\nuserRouter.get(\n  \"/\",\n  passport.authenticate(constants.passport.admin),\n  controllers.getUsers\n);\n\nuserRouter.put(\n  \"/\",\n  passport.authenticate(constants.passport.admin),\n  controllers.updateUser\n);\n\nuserRouter.post(\n  \"/\",\n  passport.authenticate(constants.passport.admin),\n  controllers.createUser\n);\n\nuserRouter.delete(\n  \"/\",\n  passport.authenticate(constants.passport.admin),\n  controllers.deleteUser\n);\n\nexport default userRouter;\n","import prisma from \"@/utils/prisma\";\nimport { responseHandler } from \"@/utils/utils\";\nimport { Permissions } from \"@prisma/client\";\nimport { Request, RequestHandler, Response } from \"express\";\n\nexport const getInstitution: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const institutions = await prisma.institution.findMany({\n      include: {\n        Admins: true,\n        Game: true,\n        PlayerInstitution: true,\n        type: true,\n      },\n    });\n    responseHandler(res, true, \"Successful\", institutions);\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const createInstitution: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const institutionType = await prisma.institutionTypes.findFirst({\n      where: { id: req.body.type },\n    });\n    if (!institutionType)\n      return responseHandler(res, false, \"institution type not found\");\n\n    await prisma.institution.create({\n      data: {\n        name: req.body.name,\n        email: req.body.email,\n        logo: req.body.logo,\n        typeId: req.body.typeId,\n      },\n    });\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const updateInstitution: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const institution = await prisma.institution.findFirst({\n      where: {\n        id: req.body.institution_id,\n      },\n    });\n    if (!institution)\n      return responseHandler(res, false, \"institution not found\");\n\n    const institutionType = await prisma.institutionTypes.findFirst({\n      where: { id: req.body.typeId },\n    });\n    if (!institutionType)\n      return responseHandler(res, false, \"institution type not found\");\n\n    await prisma.institution.update({\n      data: {\n        name: req.body.name,\n        email: req.body.email,\n        logo: req.body.logo,\n        typeId: req.body.typeId,\n      },\n      where: { id: institution.id },\n    });\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const deleteInstitution: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const institution = await prisma.institution.findFirst({\n      where: {\n        id: req.body.institution_id,\n      },\n    });\n    if (!institution)\n      return responseHandler(res, false, \"institution not found\");\n\n    await prisma.admins.deleteMany({\n      where: { institutionId: institution.id },\n    });\n    await prisma.institution.delete({ where: { id: institution.id } });\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const getInstitutionTypes: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const institution = await prisma.institutionTypes.findMany();\n    responseHandler(res, true, \"Successful\", institution);\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n","import * as controllers from \"@/controllers/admin/institution\";\nimport { Router } from \"express\";\nimport passport from \"passport\";\nimport * as constants from \"@/utils/constants\";\n\nconst institutionRouter = Router();\n\ninstitutionRouter.get(\n  \"/\",\n  passport.authenticate(constants.passport.admin),\n  controllers.getInstitution\n);\n\ninstitutionRouter.put(\n  \"/\",\n  passport.authenticate(constants.passport.admin),\n  controllers.updateInstitution\n);\n\ninstitutionRouter.post(\n  \"/\",\n  passport.authenticate(constants.passport.admin),\n  controllers.createInstitution\n);\n\ninstitutionRouter.delete(\n  \"/\",\n  passport.authenticate(constants.passport.admin),\n  controllers.deleteInstitution\n);\n\ninstitutionRouter.get(\n  \"/types\",\n  passport.authenticate(constants.passport.admin),\n  controllers.getInstitutionTypes\n)\n\nexport default institutionRouter;\n","import prisma from \"@/utils/prisma\";\nimport { responseHandler } from \"@/utils/utils\";\nimport { Answer } from \"@prisma/client\";\nimport { Request, RequestHandler, Response } from \"express\";\n\nexport const getQuestions: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const questions = await prisma.question.findMany({\n      include: { Answer: true, GameQuestion: true },\n    });\n    responseHandler(res, true, \"Successful\", questions);\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n","import * as controllers from \"@/controllers/admin/questions\";\nimport { Router } from \"express\";\nimport passport from \"passport\";\nimport * as constants from \"@/utils/constants\";\n\nconst questionRouter = Router();\n\nquestionRouter.get(\n  \"/\",\n  passport.authenticate(constants.passport.admin),\n  controllers.getQuestions\n);\n\nexport default questionRouter;\n","import prisma from \"@/utils/prisma\";\nimport { responseHandler } from \"@/utils/utils\";\nimport { Answer } from \"@prisma/client\";\nimport { Request, RequestHandler, Response } from \"express\";\n\nexport const getGames: RequestHandler = async (req: Request, res: Response) => {\n  try {\n    const games = await prisma.game.findMany({\n      include: { GameQuestion: true, institution: true, Attempt: true },\n    });\n    responseHandler(res, true, \"Successful\", games);\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const createGame: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    await prisma.game.create({\n      data: {\n        name: req.body.name,\n        institutionId: req.body.institutionId,\n        tags: req.body.tags,\n        time: req.body.time,\n        giveQuestions: req.body.giveQuestions,\n        GameQuestion: {\n          create: req.body.questions.map((q: Number) => ({\n            questionId: q,\n          })),\n        },\n      },\n    });\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const updateGame: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const game = await prisma.game.findFirst({\n      where: {\n        id: req.body.game_id,\n      },\n    });\n    if (!game) return responseHandler(res, false, \"game not found\");\n\n    await prisma.gameQuestion.deleteMany({\n      where: { gameId: game.id },\n    });\n\n    await prisma.game.create({\n      data: {\n        name: req.body.name || game.name,\n        institutionId: req.body.institutionId || game.institutionId,\n        tags: req.body.tags || game.tags,\n        time: req.body.time || game.time,\n        giveQuestions: req.body.giveQuestions || game.giveQuestions,\n        GameQuestion: {\n          create: req.body.questions.map((q: Number) => ({\n            questionId: q,\n          })),\n        },\n      },\n    });\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const deleteGame: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const game = await prisma.question.findFirst({\n      where: {\n        id: req.body.game_id,\n      },\n    });\n    if (!game) return responseHandler(res, false, \"game not found\");\n\n    await prisma.game.deleteMany({\n      where: { id: game.id },\n    });\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n","import * as controllers from \"@/controllers/admin/game\";\nimport { Router } from \"express\";\nimport passport from \"passport\";\nimport * as constants from \"@/utils/constants\";\n\nconst gameRouter = Router();\n\ngameRouter.get(\n  \"/\",\n  passport.authenticate(constants.passport.admin),\n  controllers.getGames\n);\n\ngameRouter.put(\n  \"/\",\n  passport.authenticate(constants.passport.admin),\n  controllers.updateGame\n);\n\ngameRouter.post(\n  \"/\",\n  passport.authenticate(constants.passport.admin),\n  controllers.createGame\n);\n\ngameRouter.delete(\n  \"/\",\n  passport.authenticate(constants.passport.admin),\n  controllers.deleteGame\n);\n\nexport default gameRouter;\n","import { Router } from \"express\";\nimport authRouter from \"./auth\";\n\nconst playerRouter = Router();\n\nplayerRouter.use(\"/auth\", authRouter);\n\nexport default playerRouter;\n","import * as constants from \"@/utils/constants\";\nimport sendEmail from \"@/utils/email\";\nimport prisma from \"@/utils/prisma\";\nimport { createRandomString, responseHandler } from \"@/utils/utils\";\nimport bcrypt from \"bcrypt\";\nimport { Request, RequestHandler, Response } from \"express\";\nimport jwt from \"jsonwebtoken\";\n\nexport const signUp: RequestHandler = async (req: Request, res: Response) => {\n  try {\n    const user = await prisma.player.findFirst({\n      where: { email: req.body.email },\n    });\n    if (user) return responseHandler(res, false, \"player already exists\");\n\n    const password = await bcrypt.hash(\n      req.body.password,\n      constants.bcryptRounds\n    );\n\n    await prisma.player.create({\n      data: {\n        email: req.body.email,\n        displayName: req.body.displayName,\n        profilePhoto: req.body.profilePhoto,\n        education: req.body.education,\n        PlayerInstitution: {\n          create: req.body.institutions.map((i: number) => ({\n            institutionId: i,\n          })),\n        },\n        password,\n        token: \"\",\n      },\n    });\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const signIn: RequestHandler = async (req: Request, res: Response) => {\n  try {\n    const user = await prisma.player.findFirst({\n      where: { email: req.body.email },\n    });\n    if (!user) return responseHandler(res, false, \"player not found\");\n\n    const authenticated = await bcrypt.compare(\n      req.body.password,\n      user.password\n    );\n    if (!authenticated) return responseHandler(res, false, \"invalid password\");\n\n    const token = jwt.sign({ email: user.email }, constants.env.jwtSecret, {\n      subject: String(user.id),\n    });\n\n    await prisma.player.update({\n      where: {\n        id: user.id,\n      },\n      data: {\n        token,\n      },\n    });\n\n    responseHandler(res, true, \"Successful\", { token });\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const signOut: RequestHandler = async (req: Request, res: Response) => {\n  try {\n    await prisma.player.update({\n      where: {\n        id: req.user?.data?.id,\n      },\n      data: {\n        token: \"\",\n      },\n    });\n\n    let err = null;\n    req.logout((e) => (err = e));\n\n    if (err) throw err;\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const forgetPassword: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const user = await prisma.player.findFirst({\n      where: { email: req.body.email },\n    });\n    if (!user) responseHandler(res, false, \"user not found\");\n    else {\n      const newPassword = createRandomString(8);\n      const hashed = await bcrypt.hash(newPassword, constants.bcryptRounds);\n\n      await prisma.player.update({\n        data: { password: hashed },\n        where: { id: user.id },\n      });\n\n      const emailError = await sendEmail({\n        to: [user.email],\n        subject: `Reset Password for ${user.email}`,\n        body: `<ul style=\"line-height: 1.6;\">\n                <li><strong>Name:</strong> ${user.displayName}</li>\n                <li><strong>Email:</strong> ${user.email}</li>\n                <li><strong>New Password:</strong> ${newPassword}</li>\n              </ul>`,\n      });\n      if (emailError) throw new Error(emailError);\n    }\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n","import * as controllers from \"@/controllers/player/auth\";\nimport * as constants from \"@/utils/constants\";\nimport { Router } from \"express\";\nimport passport from \"passport\";\n\nconst authRouter = Router();\n\nauthRouter.post(\"/sign-up\", controllers.signUp);\nauthRouter.post(\"/sign-in\", controllers.signIn);\nauthRouter.get(\n  \"/sign-out\",\n  passport.authenticate(constants.passport.player),\n  controllers.signOut\n);\nauthRouter.post(\"/forgot-password\", controllers.forgetPassword);\n\nexport default authRouter;\n","import { ExtractJwt, Strategy, VerifiedCallback } from \"passport-jwt\";\nimport passport from \"passport\";\nimport prisma from \"@/utils/prisma\";\nimport * as constants from \"@/utils/constants\";\nimport { Admins, Player } from \"@prisma/client\";\n\nconst opts = {\n  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n  secretOrKey: constants.env.jwtSecret,\n};\n\npassport.use(\n  constants.passport.admin,\n  new Strategy(opts, async (payload: any, done: VerifiedCallback) => {\n    try {\n      const user = await prisma.admins.findFirst({\n        where: { id: parseInt(payload.sub) },\n      });\n      if (user)\n        return done(null, { type: constants.passport.admin, data: user });\n      return done(null, false);\n    } catch (error) {\n      return done(error);\n    }\n  })\n);\n\npassport.use(\n  constants.passport.player,\n  new Strategy(opts, async (payload: any, done: VerifiedCallback) => {\n    try {\n      const user = await prisma.player.findFirst({\n        where: { id: payload.sub },\n      });\n      if (user)\n        return done(null, { type: constants.passport.player, data: user });\n      return done(null, false);\n    } catch (error) {\n      return done(error);\n    }\n  })\n);\n\npassport.serializeUser((user: any, done) => {\n  done(null, { type: user.type, id: user.data.id });\n});\n","export const passport = {\n  admin: \"admin-jwt\",\n  player: \"player-jwt\",\n};\n\nexport const env = {\n  jwtSecret: process.env.JWT_SECRET || \"oooo\",\n  sessionSecret: process.env.SESSION_SECRET || \"oooo\",\n  port: process.env.PORT || 3001\n};\n\nexport const defaultPassword = process.env.DEFAULT_PASSWORD || \"hello123\"\nexport const bcryptRounds = 10\n"],"mappings":"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","names":["Router","Router","passport","Router","passport","Router","passport","bcrypt","bcrypt","Router","passport","Router","passport","Router","passport","Router","passport","Router","passport","Router","passport","Router","passport","Router","passport","Router","Router","bcrypt","jwt","signIn","signOut","Router","passport","authRouter","signIn","signOut","auth_default","Router","auth_default","Router","passport","passport","passport","env","defaultPassword","env","passport"]}