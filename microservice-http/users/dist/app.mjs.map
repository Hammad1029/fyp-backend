{"version":3,"sources":["../src/utils/constants.ts","../src/services/institution.ts","../src/utils/email.ts","../src/utils/utils.ts","../src/controllers/admin.ts","../src/routes/admin.ts","../src/utils/middlewares.ts","../src/controllers/player.ts","../src/routes/player.ts","../src/controllers/internal.ts","../src/routes/internal.ts","../src/app.ts"],"sourcesContent":["export const env = {\n  jwtSecret: process.env.JWT_SECRET || \"oooo\",\n  port: process.env.PORT || 3002,\n};\n\nexport const defaultPassword = process.env.DEFAULT_PASSWORD || \"hello123\";\nexport const bcryptRounds = 10;\n\nexport const services = {\n  institutions: process.env.INSTITUTION_SERVICE,\n  users: process.env.USER_SERVICE,\n  games: process.env.GAME_SERVICE,\n  attempts: process.env.ATTEMPT_SERVICE,\n};\n\nexport const nodemailer = {\n  email: process.env.NODEMAILER_EMAIL,\n  password: process.env.NODEMAILER_PASSWORD,\n}","import * as constants from \"@/utils/constants\";\nimport axios from \"axios\";\n\nconst serviceURL = constants.services.institutions;\n\nclass InstitutionService {\n  getInstitutionsByIDs = async (ids: string[]): Promise<any | false> => {\n    try {\n      const institutions = await axios.post(`${serviceURL}/internal/getByID`, {\n        institutionIds: ids,\n      });\n      return institutions.data.data;\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n  };\n\n  getInstitutionByType = async (type: string): Promise<any | false> => {\n    try {\n      const institutions = await axios.post(\n        `${serviceURL}/internal/getByType`,\n        { institutionType: type }\n      );\n      return institutions.data.data;\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n  };\n\n  updatePlayerInstitutions = async (\n    playerId: number,\n    institutionIds: number[]\n  ): Promise<boolean> => {\n    try {\n      const institutions = await axios.post(\n        `${serviceURL}/internal/updatePlayerInstitutions`,\n        { playerId, institutionIds }\n      );\n      if (!institutions.data?.status)\n        throw new Error(\"could not update institutions\");\n      return true;\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n  };\n\n  getPlayerInstitutions = async (playerId: number): Promise<any | false> => {\n    try {\n      const institutions = await axios.post(\n        `${serviceURL}/internal/getPlayerInstitutions`,\n        { playerId }\n      );\n      if (!institutions.data?.status)\n        throw new Error(\"could not update institutions\");\n      return institutions.data.data;\n    } catch (e) {\n      console.error(e);\n      return false;\n    }\n  };\n}\n\nconst insitutionService = new InstitutionService();\n\nexport default insitutionService;\n","import nodemailer from \"nodemailer\";\nimport * as constants from \"@/utils/constants\";\n\nconst transporter = nodemailer.createTransport({\n  host: \"smtp.office365.com\",\n  port: 587,\n  secure: false,\n  auth: {\n    user: constants.nodemailer.email,\n    pass: constants.nodemailer.password,\n  },\n});\n\ninterface emailParams {\n  to: string[];\n  subject: string;\n  body: string;\n}\n\nconst sendEmail = async (params: emailParams): Promise<string | null> => {\n  try {\n    if (params.to.length === 0) return null;\n    const verified = await transporter.verify();\n    if (verified) {\n      const email = await transporter.sendMail({\n        from: constants.nodemailer.email,\n        to: params.to.join(\",\"),\n        subject: params.subject,\n        html: params.body,\n      });\n      return null;\n    } else throw Error(\"SMTP connection could not be verified\");\n  } catch (e) {\n    return String(e);\n  }\n};\n\nexport default sendEmail;\n","import { PrismaClient } from \"@prisma/client\";\nimport { Response } from \"express\";\n\nexport const prisma = new PrismaClient();\n\nexport const responseHandler = (\n  res: Response,\n  status: boolean,\n  message: string,\n  data?: Record<string, any>,\n  error?: unknown\n) => {\n  if (error) {\n    console.error(error);\n    res.status(500).json({ status: false, message: \"Internal Server Error\" });\n  } else {\n    res.status(200).json({ status, message, data });\n  }\n};\n\nexport const createRandomString = (length: number) => {\n  let result = \"\";\n  const characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  const charactersLength = characters.length;\n  let counter = 0;\n  while (counter < length) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    counter += 1;\n  }\n  return result;\n};\n","import insitutionService from \"@/services/institution\";\nimport * as constants from \"@/utils/constants\";\nimport sendEmail from \"@/utils/email\";\nimport { createRandomString, prisma, responseHandler } from \"@/utils/utils\";\nimport bcrypt from \"bcryptjs\";\nimport { Request, RequestHandler, Response } from \"express\";\nimport jwt from \"jsonwebtoken\";\n\nexport const signIn: RequestHandler = async (req: Request, res: Response) => {\n  try {\n    const user = await prisma.admins.findFirst({\n      where: { email: req.body.email },\n      include: {\n        role: {\n          include: { RolePermissions: { include: { permission: true } } },\n        },\n      },\n    });\n    if (!user) return responseHandler(res, false, \"user not found\");\n\n    const authenticated = await bcrypt.compare(\n      req.body.password,\n      user.password\n    );\n    if (!authenticated) return responseHandler(res, false, \"invalid password\");\n\n    const token = jwt.sign(\n      {\n        email: user.email,\n        name: user.name,\n        institution: user.institutionId,\n        permissions: user.role.RolePermissions.map((rp) => rp.permission.name),\n      },\n      constants.env.jwtSecret,\n      {\n        subject: String(user.id),\n      }\n    );\n\n    await prisma.admins.update({\n      where: {\n        id: user.id,\n      },\n      data: {\n        token,\n      },\n    });\n\n    responseHandler(res, true, \"Successful\", { token, user });\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const signOut: RequestHandler = async (req: Request, res: Response) => {\n  try {\n    await prisma.admins.update({\n      where: {\n        id: res.locals.user.id,\n      },\n      data: {\n        token: \"\",\n      },\n    });\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const getUsers: RequestHandler = async (req: Request, res: Response) => {\n  try {\n    const users = await prisma.admins.findMany({\n      include: { role: true },\n      where: {\n        OR: [\n          { name: { contains: String(req.query.search || \"\") } },\n          { email: { contains: String(req.query.search || \"\") } },\n        ],\n      },\n    });\n    responseHandler(res, true, \"Successful\", users);\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const createUser: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const exists = await prisma.admins.findFirst({\n      where: {\n        email: req.body.email,\n      },\n    });\n    if (exists)\n      return responseHandler(res, false, \"user with email already exists\");\n\n    const foundRole = await prisma.roles.findFirst({\n      where: {\n        id: req.body.roleId,\n      },\n    });\n    if (!foundRole) return responseHandler(res, false, \"role not found\");\n\n    const foundInstitution = await insitutionService.getInstitutionsByIDs([\n      req.body.institutionId,\n    ]);\n    if (!foundInstitution || !Array.isArray(foundInstitution))\n      throw new Error(\"could not get institutions\");\n    else if (foundInstitution.length === 0)\n      return responseHandler(res, false, \"institution not found\");\n\n    const newPassword = createRandomString(8);\n    const password = await bcrypt.hash(newPassword, constants.bcryptRounds);\n\n    await prisma.admins.create({\n      data: {\n        name: req.body.name,\n        email: req.body.email,\n        password,\n        institutionId: req.body.institutionId,\n        roleId: foundRole.id,\n        token: \"\",\n      },\n    });\n\n    const mailError = await sendEmail({\n      to: [req.body.email],\n      subject: `Welcome to mindtrack ${req.body.name}`,\n      body: `<ul style=\"line-height: 1.6;\">\n              <li><strong>Name:</strong> ${req.body.name}</li>\n              <li><strong>Email:</strong> ${req.body.email}</li>\n              <li><strong>Password:</stronz> ${newPassword}</li>\n              <li><strong>Role:</strong> ${foundRole.name}</li>\n            </ul>`,\n    });\n    if (mailError) throw new Error(mailError);\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const updateUser: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const user = await prisma.admins.findFirst({\n      where: {\n        id: req.body.id,\n      },\n    });\n    if (!user) return responseHandler(res, false, \"user not found\");\n\n    const foundRole = await prisma.roles.findFirst({\n      where: {\n        id: req.body.roleId,\n      },\n    });\n    if (!foundRole) return responseHandler(res, false, \"role not found\");\n\n    const foundInstitution = await insitutionService.getInstitutionsByIDs([\n      req.body.institutionId,\n    ]);\n    if (!foundInstitution || !Array.isArray(foundInstitution))\n      throw new Error(\"could not get institutions\");\n    else if (foundInstitution.length === 0)\n      return responseHandler(res, false, \"institution not found\");\n\n    await prisma.admins.update({\n      data: {\n        name: req.body.name,\n        email: req.body.email,\n        institutionId: req.body.institutionId,\n        roleId: foundRole.id,\n      },\n      where: {\n        id: user.id,\n      },\n    });\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const deleteUser: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const user = await prisma.admins.findFirst({\n      where: {\n        id: req.body.userId,\n      },\n    });\n    if (!user || !req.body.userId)\n      return responseHandler(res, false, \"user not found\");\n\n    await prisma.admins.delete({ where: { id: req.body.userId } });\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const getRoles: RequestHandler = async (req: Request, res: Response) => {\n  try {\n    const roles = await prisma.roles.findMany({\n      include: { Admins: true, RolePermissions: true },\n      where: {\n        name: { contains: String(req.query.search || \"\") },\n      },\n    });\n    responseHandler(res, true, \"Successful\", roles);\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const createRole: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const foundPermissions = await prisma.permissions.findMany({\n      where: {\n        id: {\n          in: req.body.permissions,\n        },\n      },\n    });\n    if (\n      !foundPermissions ||\n      foundPermissions.length !== req.body.permissions.length\n    )\n      return responseHandler(res, false, \"permissions not found\");\n\n    const createLinks = req.body.permissions.map((p: Permissions) => ({\n      permissionId: p,\n    }));\n    await prisma.roles.create({\n      data: {\n        name: req.body.name,\n        RolePermissions: {\n          create: createLinks,\n        },\n      },\n    });\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const updateRole: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const role = await prisma.roles.findFirst({\n      where: {\n        id: req.body.roleId,\n      },\n    });\n    if (!role) return responseHandler(res, false, \"role not found\");\n\n    if (req.body.name !== role.name) {\n      const roleNameExists = await prisma.roles.findMany({\n        where: { name: req.body.name },\n      });\n      if (roleNameExists.length > 0)\n        return responseHandler(\n          res,\n          false,\n          `role with name ${req.body.name} already exists`\n        );\n\n      await prisma.roles.update({\n        data: {\n          name: req.body.name,\n        },\n        where: { id: role.id },\n      });\n    }\n\n    await prisma.rolePermissions.deleteMany({ where: { roleId: role.id } });\n    await prisma.rolePermissions.createMany({\n      data: req.body.permissions.map((p: number) => ({\n        roleId: role.id,\n        permissionId: p,\n      })),\n    });\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const deleteRole: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const role = await prisma.roles.findFirst({\n      where: {\n        id: req.body.roleId,\n      },\n    });\n    if (!role) return responseHandler(res, false, \"role not found \");\n\n    const roleAssignees = await prisma.admins.findMany({\n      where: {\n        roleId: req.body.roleId,\n      },\n    });\n    if (roleAssignees.length > 0)\n      return responseHandler(\n        res,\n        false,\n        `Role assigned to ${roleAssignees.length} users`\n      );\n\n    await prisma.rolePermissions.deleteMany({ where: { roleId: role.id } });\n    await prisma.roles.delete({ where: { id: role.id } });\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const getPermissions: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const permissions = await prisma.permissions.findMany();\n    responseHandler(res, true, \"Successful\", permissions);\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n","import * as controllers from \"@/controllers/admin\";\nimport { Router } from \"express\";\nimport { authenticate, authorize } from \"@/utils/middlewares\";\n\nconst router: Router = Router();\n\nrouter.post(\"/sign-in\", controllers.signIn);\n\nrouter.get(\"/sign-out\", authenticate, controllers.signOut);\n\nrouter.get(\n  \"/users\",\n  authenticate,\n  authorize(\"user-view\"),\n  controllers.getUsers\n);\n\nrouter.put(\n  \"/users\",\n  authenticate,\n  authorize(\"user-edit\"),\n  controllers.updateUser\n);\n\nrouter.post(\n  \"/users\",\n  authenticate,\n  authorize(\"user-add\"),\n  controllers.createUser\n);\n\nrouter.delete(\n  \"/users\",\n  authenticate,\n  authorize(\"user-delete\"),\n  controllers.deleteUser\n);\n\nrouter.get(\n  \"/roles\",\n  authenticate,\n  authorize(\"role-view\"),\n  controllers.getRoles\n);\n\nrouter.put(\n  \"/roles\",\n  authenticate,\n  authorize(\"role-edit\"),\n  controllers.updateRole\n);\n\nrouter.post(\n  \"/roles\",\n  authenticate,\n  authorize(\"role-add\"),\n  controllers.createRole\n);\n\nrouter.delete(\n  \"/roles\",\n  authenticate,\n  authorize(\"role-delete\"),\n  controllers.deleteRole\n);\n\nrouter.get(\n  \"/permissions\",\n  authenticate,\n  authorize(\"role-view\"),\n  controllers.getPermissions\n);\n\nexport default router;\n","import { Request, RequestHandler, Response, NextFunction } from \"express\";\nimport { responseHandler } from \"@/utils/utils\";\nimport jwt from \"jsonwebtoken\";\nimport * as constants from \"@/utils/constants\";\n\nexport const authenticate: RequestHandler = async (\n  req: Request,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    const token = req.headers.authorization?.split(\" \")[1] || null;\n    if (!token) return responseHandler(res, false, \"token not found\");\n    try {\n      res.locals.user = jwt.verify(token, constants.env.jwtSecret);\n      next();\n    } catch (e) {\n      console.log(e);\n      return responseHandler(res, false, \"invalid token\");\n    }\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const authorize =\n  (perm: string): RequestHandler =>\n  async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const permissions = res.locals.user.permissions;\n      if (Array.isArray(permissions) && permissions.includes(perm)) next();\n      else return responseHandler(res, false, `permission ${perm} required`);\n    } catch (e) {\n      responseHandler(res, false, \"\", undefined, e);\n    }\n  };\n","import insitutionService from \"@/services/institution\";\nimport * as constants from \"@/utils/constants\";\nimport sendEmail from \"@/utils/email\";\nimport { createRandomString, prisma, responseHandler } from \"@/utils/utils\";\nimport bcrypt from \"bcryptjs\";\nimport { Request, RequestHandler, Response } from \"express\";\nimport jwt from \"jsonwebtoken\";\n\nexport const signUp: RequestHandler = async (req: Request, res: Response) => {\n  try {\n    const user = await prisma.player.findFirst({\n      where: { email: req.body.email },\n    });\n    if (user) return responseHandler(res, false, \"player already exists\");\n\n    const password = await bcrypt.hash(\n      req.body.password,\n      constants.bcryptRounds\n    );\n\n    const mindtrackInstitution = await insitutionService.getInstitutionByType(\n      \"Mindtrack\"\n    );\n    if (!mindtrackInstitution)\n      return responseHandler(res, false, \"mindtrack institution not found\");\n\n    const otherInstitutions = await insitutionService.getInstitutionsByIDs(\n      req.body.institutions\n    );\n    if (!otherInstitutions || !Array.isArray(otherInstitutions))\n      throw new Error(\"could not get institutions\");\n    else if (otherInstitutions.length < req.body.institutions.length)\n      return responseHandler(res, false, \"missing institutions\");\n\n    const player = await prisma.player.create({\n      data: {\n        email: req.body.email,\n        displayName: req.body.displayName,\n        profilePhoto: req.body.profilePhoto,\n        education: req.body.education,\n        password,\n        token: \"\",\n      },\n    });\n    const addInstitutions = await insitutionService.updatePlayerInstitutions(\n      player.id,\n      req.body.institutions\n    );\n    if (!addInstitutions) {\n      await prisma.player.delete({ where: { id: player.id } });\n      return responseHandler(\n        res,\n        false,\n        \"could not add institutions, sign up again\"\n      );\n    }\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const signIn: RequestHandler = async (req: Request, res: Response) => {\n  try {\n    const user = await prisma.player.findFirst({\n      where: { email: req.body.email },\n    });\n    if (!user) return responseHandler(res, false, \"player not found\");\n\n    const authenticated = await bcrypt.compare(\n      req.body.password,\n      user.password\n    );\n    if (!authenticated) return responseHandler(res, false, \"invalid password\");\n\n    const playerInstitutions = await insitutionService.getPlayerInstitutions(\n      user.id\n    );\n    if (!playerInstitutions)\n      return responseHandler(res, false, \"could not get player institutions\");\n\n    const token = jwt.sign(\n      {\n        email: user.email,\n        displayName: user.displayName,\n        institutionIds: playerInstitutions.map((p: any) => p.id),\n        education: user.education,\n      },\n      constants.env.jwtSecret,\n      {\n        subject: String(user.id),\n      }\n    );\n\n    await prisma.player.update({\n      where: {\n        id: user.id,\n      },\n      data: {\n        token,\n      },\n    });\n\n    responseHandler(res, true, \"Successful\", { token });\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const signOut: RequestHandler = async (req: Request, res: Response) => {\n  try {\n    await prisma.player.update({\n      where: {\n        id: res.locals.user.id,\n      },\n      data: {\n        token: \"\",\n      },\n    });\n\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n\nexport const forgetPassword: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    const user = await prisma.player.findFirst({\n      where: { email: req.body.email },\n    });\n    if (!user) responseHandler(res, false, \"user not found\");\n    else {\n      const newPassword = createRandomString(8);\n      const hashed = await bcrypt.hash(newPassword, constants.bcryptRounds);\n\n      await prisma.player.update({\n        data: { password: hashed },\n        where: { id: user.id },\n      });\n\n      const emailError = await sendEmail({\n        to: [user.email],\n        subject: `Reset Password for ${user.email}`,\n        body: `<ul style=\"line-height: 1.6;\">\n                <li><strong>Name:</strong> ${user.displayName}</li>\n                <li><strong>Email:</strong> ${user.email}</li>\n                <li><strong>New Password:</strong> ${newPassword}</li>\n              </ul>`,\n      });\n      if (emailError) throw new Error(emailError);\n    }\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n","import * as controllers from \"@/controllers/player\";\nimport { Router } from \"express\";\nimport { authenticate } from \"@/utils/middlewares\";\n\nconst router: Router = Router();\n\nrouter.post(\"/sign-up\", controllers.signUp);\n\nrouter.post(\"/sign-in\", controllers.signIn);\n\nrouter.get(\"/sign-out\", authenticate, controllers.signOut);\n\nrouter.post(\"/forgot-password\", controllers.forgetPassword);\n\nexport default router;\n","import { prisma, responseHandler } from \"@/utils/utils\";\nimport { Request, RequestHandler, Response } from \"express\";\n\nexport const deleteInstitutionAdmins: RequestHandler = async (\n  req: Request,\n  res: Response\n) => {\n  try {\n    await prisma.admins.deleteMany({\n      where: { institutionId: req.body.institutionId },\n    });\n    responseHandler(res, true, \"Successful\");\n  } catch (e) {\n    responseHandler(res, false, \"\", undefined, e);\n  }\n};\n","import * as controllers from \"@/controllers/internal\";\nimport { Router } from \"express\";\n\nconst router: Router = Router();\n\nrouter.delete(\"/deleteInstitutionAdmins\", controllers.deleteInstitutionAdmins);\n\nexport default router;\n","import adminRouter from \"@/routes/admin\";\nimport playerRouter from \"@/routes/player\";\nimport internalRouter from \"@/routes/internal\";\nimport * as constants from \"@/utils/constants.js\";\nimport cors from \"cors\";\nimport express from \"express\";\n\nconst app = express();\n\napp.set(\"trust proxy\", 1);\n\nconst port = constants.env.port;\napp.use(cors());\napp.use(express.json());\n\napp.use(\"/admin\", adminRouter);\napp.use(\"/player\", playerRouter);\napp.use(\"/internal\", internalRouter);\n\napp.listen(port, (e) => {\n  if (e) console.error(e);\n  else console.log(`Server running on port: ${port}`);\n});\n"],"mappings":";AAAO,IAAM,MAAM;AAAA,EACjB,WAAW,QAAQ,IAAI,cAAc;AAAA,EACrC,MAAM,QAAQ,IAAI,QAAQ;AAC5B;AAEO,IAAM,kBAAkB,QAAQ,IAAI,oBAAoB;AACxD,IAAM,eAAe;AAErB,IAAM,WAAW;AAAA,EACtB,cAAc,QAAQ,IAAI;AAAA,EAC1B,OAAO,QAAQ,IAAI;AAAA,EACnB,OAAO,QAAQ,IAAI;AAAA,EACnB,UAAU,QAAQ,IAAI;AACxB;AAEO,IAAM,aAAa;AAAA,EACxB,OAAO,QAAQ,IAAI;AAAA,EACnB,UAAU,QAAQ,IAAI;AACxB;;;ACjBA,OAAO,WAAW;AAElB,IAAM,aAAuB,SAAS;AAEtC,IAAM,qBAAN,MAAyB;AAAA,EAAzB;AACE,gCAAuB,OAAO,QAAwC;AACpE,UAAI;AACF,cAAM,eAAe,MAAM,MAAM,KAAK,GAAG,UAAU,qBAAqB;AAAA,UACtE,gBAAgB;AAAA,QAClB,CAAC;AACD,eAAO,aAAa,KAAK;AAAA,MAC3B,SAAS,GAAG;AACV,gBAAQ,MAAM,CAAC;AACf,eAAO;AAAA,MACT;AAAA,IACF;AAEA,gCAAuB,OAAO,SAAuC;AACnE,UAAI;AACF,cAAM,eAAe,MAAM,MAAM;AAAA,UAC/B,GAAG,UAAU;AAAA,UACb,EAAE,iBAAiB,KAAK;AAAA,QAC1B;AACA,eAAO,aAAa,KAAK;AAAA,MAC3B,SAAS,GAAG;AACV,gBAAQ,MAAM,CAAC;AACf,eAAO;AAAA,MACT;AAAA,IACF;AAEA,oCAA2B,OACzB,UACA,mBACqB;AACrB,UAAI;AACF,cAAM,eAAe,MAAM,MAAM;AAAA,UAC/B,GAAG,UAAU;AAAA,UACb,EAAE,UAAU,eAAe;AAAA,QAC7B;AACA,YAAI,CAAC,aAAa,MAAM;AACtB,gBAAM,IAAI,MAAM,+BAA+B;AACjD,eAAO;AAAA,MACT,SAAS,GAAG;AACV,gBAAQ,MAAM,CAAC;AACf,eAAO;AAAA,MACT;AAAA,IACF;AAEA,iCAAwB,OAAO,aAA2C;AACxE,UAAI;AACF,cAAM,eAAe,MAAM,MAAM;AAAA,UAC/B,GAAG,UAAU;AAAA,UACb,EAAE,SAAS;AAAA,QACb;AACA,YAAI,CAAC,aAAa,MAAM;AACtB,gBAAM,IAAI,MAAM,+BAA+B;AACjD,eAAO,aAAa,KAAK;AAAA,MAC3B,SAAS,GAAG;AACV,gBAAQ,MAAM,CAAC;AACf,eAAO;AAAA,MACT;AAAA,IACF;AAAA;AACF;AAEA,IAAM,oBAAoB,IAAI,mBAAmB;AAEjD,IAAO,sBAAQ;;;ACnEf,OAAOA,iBAAgB;AAGvB,IAAM,cAAcC,YAAW,gBAAgB;AAAA,EAC7C,MAAM;AAAA,EACN,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,MAAM;AAAA,IACJ,MAAgB,WAAW;AAAA,IAC3B,MAAgB,WAAW;AAAA,EAC7B;AACF,CAAC;AAQD,IAAM,YAAY,OAAO,WAAgD;AACvE,MAAI;AACF,QAAI,OAAO,GAAG,WAAW,EAAG,QAAO;AACnC,UAAM,WAAW,MAAM,YAAY,OAAO;AAC1C,QAAI,UAAU;AACZ,YAAM,QAAQ,MAAM,YAAY,SAAS;AAAA,QACvC,MAAgB,WAAW;AAAA,QAC3B,IAAI,OAAO,GAAG,KAAK,GAAG;AAAA,QACtB,SAAS,OAAO;AAAA,QAChB,MAAM,OAAO;AAAA,MACf,CAAC;AACD,aAAO;AAAA,IACT,MAAO,OAAM,MAAM,uCAAuC;AAAA,EAC5D,SAAS,GAAG;AACV,WAAO,OAAO,CAAC;AAAA,EACjB;AACF;AAEA,IAAO,gBAAQ;;;ACrCf,SAAS,oBAAoB;AAGtB,IAAM,SAAS,IAAI,aAAa;AAEhC,IAAM,kBAAkB,CAC7B,KACA,QACA,SACA,MACA,UACG;AACH,MAAI,OAAO;AACT,YAAQ,MAAM,KAAK;AACnB,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,QAAQ,OAAO,SAAS,wBAAwB,CAAC;AAAA,EAC1E,OAAO;AACL,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,QAAQ,SAAS,KAAK,CAAC;AAAA,EAChD;AACF;AAEO,IAAM,qBAAqB,CAAC,WAAmB;AACpD,MAAI,SAAS;AACb,QAAM,aACJ;AACF,QAAM,mBAAmB,WAAW;AACpC,MAAI,UAAU;AACd,SAAO,UAAU,QAAQ;AACvB,cAAU,WAAW,OAAO,KAAK,MAAM,KAAK,OAAO,IAAI,gBAAgB,CAAC;AACxE,eAAW;AAAA,EACb;AACA,SAAO;AACT;;;AC3BA,OAAO,YAAY;AAEnB,OAAO,SAAS;AAET,IAAM,SAAyB,OAAO,KAAc,QAAkB;AAC3E,MAAI;AACF,UAAM,OAAO,MAAM,OAAO,OAAO,UAAU;AAAA,MACzC,OAAO,EAAE,OAAO,IAAI,KAAK,MAAM;AAAA,MAC/B,SAAS;AAAA,QACP,MAAM;AAAA,UACJ,SAAS,EAAE,iBAAiB,EAAE,SAAS,EAAE,YAAY,KAAK,EAAE,EAAE;AAAA,QAChE;AAAA,MACF;AAAA,IACF,CAAC;AACD,QAAI,CAAC,KAAM,QAAO,gBAAgB,KAAK,OAAO,gBAAgB;AAE9D,UAAM,gBAAgB,MAAM,OAAO;AAAA,MACjC,IAAI,KAAK;AAAA,MACT,KAAK;AAAA,IACP;AACA,QAAI,CAAC,cAAe,QAAO,gBAAgB,KAAK,OAAO,kBAAkB;AAEzE,UAAM,QAAQ,IAAI;AAAA,MAChB;AAAA,QACE,OAAO,KAAK;AAAA,QACZ,MAAM,KAAK;AAAA,QACX,aAAa,KAAK;AAAA,QAClB,aAAa,KAAK,KAAK,gBAAgB,IAAI,CAAC,OAAO,GAAG,WAAW,IAAI;AAAA,MACvE;AAAA,MACU,IAAI;AAAA,MACd;AAAA,QACE,SAAS,OAAO,KAAK,EAAE;AAAA,MACzB;AAAA,IACF;AAEA,UAAM,OAAO,OAAO,OAAO;AAAA,MACzB,OAAO;AAAA,QACL,IAAI,KAAK;AAAA,MACX;AAAA,MACA,MAAM;AAAA,QACJ;AAAA,MACF;AAAA,IACF,CAAC;AAED,oBAAgB,KAAK,MAAM,cAAc,EAAE,OAAO,KAAK,CAAC;AAAA,EAC1D,SAAS,GAAG;AACV,oBAAgB,KAAK,OAAO,IAAI,QAAW,CAAC;AAAA,EAC9C;AACF;AAEO,IAAM,UAA0B,OAAO,KAAc,QAAkB;AAC5E,MAAI;AACF,UAAM,OAAO,OAAO,OAAO;AAAA,MACzB,OAAO;AAAA,QACL,IAAI,IAAI,OAAO,KAAK;AAAA,MACtB;AAAA,MACA,MAAM;AAAA,QACJ,OAAO;AAAA,MACT;AAAA,IACF,CAAC;AACD,oBAAgB,KAAK,MAAM,YAAY;AAAA,EACzC,SAAS,GAAG;AACV,oBAAgB,KAAK,OAAO,IAAI,QAAW,CAAC;AAAA,EAC9C;AACF;AAEO,IAAM,WAA2B,OAAO,KAAc,QAAkB;AAC7E,MAAI;AACF,UAAM,QAAQ,MAAM,OAAO,OAAO,SAAS;AAAA,MACzC,SAAS,EAAE,MAAM,KAAK;AAAA,MACtB,OAAO;AAAA,QACL,IAAI;AAAA,UACF,EAAE,MAAM,EAAE,UAAU,OAAO,IAAI,MAAM,UAAU,EAAE,EAAE,EAAE;AAAA,UACrD,EAAE,OAAO,EAAE,UAAU,OAAO,IAAI,MAAM,UAAU,EAAE,EAAE,EAAE;AAAA,QACxD;AAAA,MACF;AAAA,IACF,CAAC;AACD,oBAAgB,KAAK,MAAM,cAAc,KAAK;AAAA,EAChD,SAAS,GAAG;AACV,oBAAgB,KAAK,OAAO,IAAI,QAAW,CAAC;AAAA,EAC9C;AACF;AAEO,IAAM,aAA6B,OACxC,KACA,QACG;AACH,MAAI;AACF,UAAM,SAAS,MAAM,OAAO,OAAO,UAAU;AAAA,MAC3C,OAAO;AAAA,QACL,OAAO,IAAI,KAAK;AAAA,MAClB;AAAA,IACF,CAAC;AACD,QAAI;AACF,aAAO,gBAAgB,KAAK,OAAO,gCAAgC;AAErE,UAAM,YAAY,MAAM,OAAO,MAAM,UAAU;AAAA,MAC7C,OAAO;AAAA,QACL,IAAI,IAAI,KAAK;AAAA,MACf;AAAA,IACF,CAAC;AACD,QAAI,CAAC,UAAW,QAAO,gBAAgB,KAAK,OAAO,gBAAgB;AAEnE,UAAM,mBAAmB,MAAM,oBAAkB,qBAAqB;AAAA,MACpE,IAAI,KAAK;AAAA,IACX,CAAC;AACD,QAAI,CAAC,oBAAoB,CAAC,MAAM,QAAQ,gBAAgB;AACtD,YAAM,IAAI,MAAM,4BAA4B;AAAA,aACrC,iBAAiB,WAAW;AACnC,aAAO,gBAAgB,KAAK,OAAO,uBAAuB;AAE5D,UAAM,cAAc,mBAAmB,CAAC;AACxC,UAAM,WAAW,MAAM,OAAO,KAAK,aAAuB,YAAY;AAEtE,UAAM,OAAO,OAAO,OAAO;AAAA,MACzB,MAAM;AAAA,QACJ,MAAM,IAAI,KAAK;AAAA,QACf,OAAO,IAAI,KAAK;AAAA,QAChB;AAAA,QACA,eAAe,IAAI,KAAK;AAAA,QACxB,QAAQ,UAAU;AAAA,QAClB,OAAO;AAAA,MACT;AAAA,IACF,CAAC;AAED,UAAM,YAAY,MAAM,cAAU;AAAA,MAChC,IAAI,CAAC,IAAI,KAAK,KAAK;AAAA,MACnB,SAAS,wBAAwB,IAAI,KAAK,IAAI;AAAA,MAC9C,MAAM;AAAA,2CAC+B,IAAI,KAAK,IAAI;AAAA,4CACZ,IAAI,KAAK,KAAK;AAAA,+CACX,WAAW;AAAA,2CACf,UAAU,IAAI;AAAA;AAAA,IAErD,CAAC;AACD,QAAI,UAAW,OAAM,IAAI,MAAM,SAAS;AAExC,oBAAgB,KAAK,MAAM,YAAY;AAAA,EACzC,SAAS,GAAG;AACV,oBAAgB,KAAK,OAAO,IAAI,QAAW,CAAC;AAAA,EAC9C;AACF;AAEO,IAAM,aAA6B,OACxC,KACA,QACG;AACH,MAAI;AACF,UAAM,OAAO,MAAM,OAAO,OAAO,UAAU;AAAA,MACzC,OAAO;AAAA,QACL,IAAI,IAAI,KAAK;AAAA,MACf;AAAA,IACF,CAAC;AACD,QAAI,CAAC,KAAM,QAAO,gBAAgB,KAAK,OAAO,gBAAgB;AAE9D,UAAM,YAAY,MAAM,OAAO,MAAM,UAAU;AAAA,MAC7C,OAAO;AAAA,QACL,IAAI,IAAI,KAAK;AAAA,MACf;AAAA,IACF,CAAC;AACD,QAAI,CAAC,UAAW,QAAO,gBAAgB,KAAK,OAAO,gBAAgB;AAEnE,UAAM,mBAAmB,MAAM,oBAAkB,qBAAqB;AAAA,MACpE,IAAI,KAAK;AAAA,IACX,CAAC;AACD,QAAI,CAAC,oBAAoB,CAAC,MAAM,QAAQ,gBAAgB;AACtD,YAAM,IAAI,MAAM,4BAA4B;AAAA,aACrC,iBAAiB,WAAW;AACnC,aAAO,gBAAgB,KAAK,OAAO,uBAAuB;AAE5D,UAAM,OAAO,OAAO,OAAO;AAAA,MACzB,MAAM;AAAA,QACJ,MAAM,IAAI,KAAK;AAAA,QACf,OAAO,IAAI,KAAK;AAAA,QAChB,eAAe,IAAI,KAAK;AAAA,QACxB,QAAQ,UAAU;AAAA,MACpB;AAAA,MACA,OAAO;AAAA,QACL,IAAI,KAAK;AAAA,MACX;AAAA,IACF,CAAC;AAED,oBAAgB,KAAK,MAAM,YAAY;AAAA,EACzC,SAAS,GAAG;AACV,oBAAgB,KAAK,OAAO,IAAI,QAAW,CAAC;AAAA,EAC9C;AACF;AAEO,IAAM,aAA6B,OACxC,KACA,QACG;AACH,MAAI;AACF,UAAM,OAAO,MAAM,OAAO,OAAO,UAAU;AAAA,MACzC,OAAO;AAAA,QACL,IAAI,IAAI,KAAK;AAAA,MACf;AAAA,IACF,CAAC;AACD,QAAI,CAAC,QAAQ,CAAC,IAAI,KAAK;AACrB,aAAO,gBAAgB,KAAK,OAAO,gBAAgB;AAErD,UAAM,OAAO,OAAO,OAAO,EAAE,OAAO,EAAE,IAAI,IAAI,KAAK,OAAO,EAAE,CAAC;AAE7D,oBAAgB,KAAK,MAAM,YAAY;AAAA,EACzC,SAAS,GAAG;AACV,oBAAgB,KAAK,OAAO,IAAI,QAAW,CAAC;AAAA,EAC9C;AACF;AAEO,IAAM,WAA2B,OAAO,KAAc,QAAkB;AAC7E,MAAI;AACF,UAAM,QAAQ,MAAM,OAAO,MAAM,SAAS;AAAA,MACxC,SAAS,EAAE,QAAQ,MAAM,iBAAiB,KAAK;AAAA,MAC/C,OAAO;AAAA,QACL,MAAM,EAAE,UAAU,OAAO,IAAI,MAAM,UAAU,EAAE,EAAE;AAAA,MACnD;AAAA,IACF,CAAC;AACD,oBAAgB,KAAK,MAAM,cAAc,KAAK;AAAA,EAChD,SAAS,GAAG;AACV,oBAAgB,KAAK,OAAO,IAAI,QAAW,CAAC;AAAA,EAC9C;AACF;AAEO,IAAM,aAA6B,OACxC,KACA,QACG;AACH,MAAI;AACF,UAAM,mBAAmB,MAAM,OAAO,YAAY,SAAS;AAAA,MACzD,OAAO;AAAA,QACL,IAAI;AAAA,UACF,IAAI,IAAI,KAAK;AAAA,QACf;AAAA,MACF;AAAA,IACF,CAAC;AACD,QACE,CAAC,oBACD,iBAAiB,WAAW,IAAI,KAAK,YAAY;AAEjD,aAAO,gBAAgB,KAAK,OAAO,uBAAuB;AAE5D,UAAM,cAAc,IAAI,KAAK,YAAY,IAAI,CAAC,OAAoB;AAAA,MAChE,cAAc;AAAA,IAChB,EAAE;AACF,UAAM,OAAO,MAAM,OAAO;AAAA,MACxB,MAAM;AAAA,QACJ,MAAM,IAAI,KAAK;AAAA,QACf,iBAAiB;AAAA,UACf,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF,CAAC;AAED,oBAAgB,KAAK,MAAM,YAAY;AAAA,EACzC,SAAS,GAAG;AACV,oBAAgB,KAAK,OAAO,IAAI,QAAW,CAAC;AAAA,EAC9C;AACF;AAEO,IAAM,aAA6B,OACxC,KACA,QACG;AACH,MAAI;AACF,UAAM,OAAO,MAAM,OAAO,MAAM,UAAU;AAAA,MACxC,OAAO;AAAA,QACL,IAAI,IAAI,KAAK;AAAA,MACf;AAAA,IACF,CAAC;AACD,QAAI,CAAC,KAAM,QAAO,gBAAgB,KAAK,OAAO,gBAAgB;AAE9D,QAAI,IAAI,KAAK,SAAS,KAAK,MAAM;AAC/B,YAAM,iBAAiB,MAAM,OAAO,MAAM,SAAS;AAAA,QACjD,OAAO,EAAE,MAAM,IAAI,KAAK,KAAK;AAAA,MAC/B,CAAC;AACD,UAAI,eAAe,SAAS;AAC1B,eAAO;AAAA,UACL;AAAA,UACA;AAAA,UACA,kBAAkB,IAAI,KAAK,IAAI;AAAA,QACjC;AAEF,YAAM,OAAO,MAAM,OAAO;AAAA,QACxB,MAAM;AAAA,UACJ,MAAM,IAAI,KAAK;AAAA,QACjB;AAAA,QACA,OAAO,EAAE,IAAI,KAAK,GAAG;AAAA,MACvB,CAAC;AAAA,IACH;AAEA,UAAM,OAAO,gBAAgB,WAAW,EAAE,OAAO,EAAE,QAAQ,KAAK,GAAG,EAAE,CAAC;AACtE,UAAM,OAAO,gBAAgB,WAAW;AAAA,MACtC,MAAM,IAAI,KAAK,YAAY,IAAI,CAAC,OAAe;AAAA,QAC7C,QAAQ,KAAK;AAAA,QACb,cAAc;AAAA,MAChB,EAAE;AAAA,IACJ,CAAC;AAED,oBAAgB,KAAK,MAAM,YAAY;AAAA,EACzC,SAAS,GAAG;AACV,oBAAgB,KAAK,OAAO,IAAI,QAAW,CAAC;AAAA,EAC9C;AACF;AAEO,IAAM,aAA6B,OACxC,KACA,QACG;AACH,MAAI;AACF,UAAM,OAAO,MAAM,OAAO,MAAM,UAAU;AAAA,MACxC,OAAO;AAAA,QACL,IAAI,IAAI,KAAK;AAAA,MACf;AAAA,IACF,CAAC;AACD,QAAI,CAAC,KAAM,QAAO,gBAAgB,KAAK,OAAO,iBAAiB;AAE/D,UAAM,gBAAgB,MAAM,OAAO,OAAO,SAAS;AAAA,MACjD,OAAO;AAAA,QACL,QAAQ,IAAI,KAAK;AAAA,MACnB;AAAA,IACF,CAAC;AACD,QAAI,cAAc,SAAS;AACzB,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA,oBAAoB,cAAc,MAAM;AAAA,MAC1C;AAEF,UAAM,OAAO,gBAAgB,WAAW,EAAE,OAAO,EAAE,QAAQ,KAAK,GAAG,EAAE,CAAC;AACtE,UAAM,OAAO,MAAM,OAAO,EAAE,OAAO,EAAE,IAAI,KAAK,GAAG,EAAE,CAAC;AAEpD,oBAAgB,KAAK,MAAM,YAAY;AAAA,EACzC,SAAS,GAAG;AACV,oBAAgB,KAAK,OAAO,IAAI,QAAW,CAAC;AAAA,EAC9C;AACF;AAEO,IAAM,iBAAiC,OAC5C,KACA,QACG;AACH,MAAI;AACF,UAAM,cAAc,MAAM,OAAO,YAAY,SAAS;AACtD,oBAAgB,KAAK,MAAM,cAAc,WAAW;AAAA,EACtD,SAAS,GAAG;AACV,oBAAgB,KAAK,OAAO,IAAI,QAAW,CAAC;AAAA,EAC9C;AACF;;;AC9VA,SAAS,cAAc;;;ACCvB,OAAOC,UAAS;AAGT,IAAM,eAA+B,OAC1C,KACA,KACA,SACG;AACH,MAAI;AACF,UAAM,QAAQ,IAAI,QAAQ,eAAe,MAAM,GAAG,EAAE,CAAC,KAAK;AAC1D,QAAI,CAAC,MAAO,QAAO,gBAAgB,KAAK,OAAO,iBAAiB;AAChE,QAAI;AACF,UAAI,OAAO,OAAOC,KAAI,OAAO,OAAiB,IAAI,SAAS;AAC3D,WAAK;AAAA,IACP,SAAS,GAAG;AACV,cAAQ,IAAI,CAAC;AACb,aAAO,gBAAgB,KAAK,OAAO,eAAe;AAAA,IACpD;AAAA,EACF,SAAS,GAAG;AACV,oBAAgB,KAAK,OAAO,IAAI,QAAW,CAAC;AAAA,EAC9C;AACF;AAEO,IAAM,YACX,CAAC,SACD,OAAO,KAAc,KAAe,SAAuB;AACzD,MAAI;AACF,UAAM,cAAc,IAAI,OAAO,KAAK;AACpC,QAAI,MAAM,QAAQ,WAAW,KAAK,YAAY,SAAS,IAAI,EAAG,MAAK;AAAA,QAC9D,QAAO,gBAAgB,KAAK,OAAO,cAAc,IAAI,WAAW;AAAA,EACvE,SAAS,GAAG;AACV,oBAAgB,KAAK,OAAO,IAAI,QAAW,CAAC;AAAA,EAC9C;AACF;;;AD/BF,IAAM,SAAiB,OAAO;AAE9B,OAAO,KAAK,YAAwB,MAAM;AAE1C,OAAO,IAAI,aAAa,cAA0B,OAAO;AAEzD,OAAO;AAAA,EACL;AAAA,EACA;AAAA,EACA,UAAU,WAAW;AAAA,EACT;AACd;AAEA,OAAO;AAAA,EACL;AAAA,EACA;AAAA,EACA,UAAU,WAAW;AAAA,EACT;AACd;AAEA,OAAO;AAAA,EACL;AAAA,EACA;AAAA,EACA,UAAU,UAAU;AAAA,EACR;AACd;AAEA,OAAO;AAAA,EACL;AAAA,EACA;AAAA,EACA,UAAU,aAAa;AAAA,EACX;AACd;AAEA,OAAO;AAAA,EACL;AAAA,EACA;AAAA,EACA,UAAU,WAAW;AAAA,EACT;AACd;AAEA,OAAO;AAAA,EACL;AAAA,EACA;AAAA,EACA,UAAU,WAAW;AAAA,EACT;AACd;AAEA,OAAO;AAAA,EACL;AAAA,EACA;AAAA,EACA,UAAU,UAAU;AAAA,EACR;AACd;AAEA,OAAO;AAAA,EACL;AAAA,EACA;AAAA,EACA,UAAU,aAAa;AAAA,EACX;AACd;AAEA,OAAO;AAAA,EACL;AAAA,EACA;AAAA,EACA,UAAU,WAAW;AAAA,EACT;AACd;AAEA,IAAO,gBAAQ;;;AErEf,OAAOC,aAAY;AAEnB,OAAOC,UAAS;AAET,IAAM,SAAyB,OAAO,KAAc,QAAkB;AAC3E,MAAI;AACF,UAAM,OAAO,MAAM,OAAO,OAAO,UAAU;AAAA,MACzC,OAAO,EAAE,OAAO,IAAI,KAAK,MAAM;AAAA,IACjC,CAAC;AACD,QAAI,KAAM,QAAO,gBAAgB,KAAK,OAAO,uBAAuB;AAEpE,UAAM,WAAW,MAAMD,QAAO;AAAA,MAC5B,IAAI,KAAK;AAAA,MACC;AAAA,IACZ;AAEA,UAAM,uBAAuB,MAAM,oBAAkB;AAAA,MACnD;AAAA,IACF;AACA,QAAI,CAAC;AACH,aAAO,gBAAgB,KAAK,OAAO,iCAAiC;AAEtE,UAAM,oBAAoB,MAAM,oBAAkB;AAAA,MAChD,IAAI,KAAK;AAAA,IACX;AACA,QAAI,CAAC,qBAAqB,CAAC,MAAM,QAAQ,iBAAiB;AACxD,YAAM,IAAI,MAAM,4BAA4B;AAAA,aACrC,kBAAkB,SAAS,IAAI,KAAK,aAAa;AACxD,aAAO,gBAAgB,KAAK,OAAO,sBAAsB;AAE3D,UAAM,SAAS,MAAM,OAAO,OAAO,OAAO;AAAA,MACxC,MAAM;AAAA,QACJ,OAAO,IAAI,KAAK;AAAA,QAChB,aAAa,IAAI,KAAK;AAAA,QACtB,cAAc,IAAI,KAAK;AAAA,QACvB,WAAW,IAAI,KAAK;AAAA,QACpB;AAAA,QACA,OAAO;AAAA,MACT;AAAA,IACF,CAAC;AACD,UAAM,kBAAkB,MAAM,oBAAkB;AAAA,MAC9C,OAAO;AAAA,MACP,IAAI,KAAK;AAAA,IACX;AACA,QAAI,CAAC,iBAAiB;AACpB,YAAM,OAAO,OAAO,OAAO,EAAE,OAAO,EAAE,IAAI,OAAO,GAAG,EAAE,CAAC;AACvD,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,oBAAgB,KAAK,MAAM,YAAY;AAAA,EACzC,SAAS,GAAG;AACV,oBAAgB,KAAK,OAAO,IAAI,QAAW,CAAC;AAAA,EAC9C;AACF;AAEO,IAAME,UAAyB,OAAO,KAAc,QAAkB;AAC3E,MAAI;AACF,UAAM,OAAO,MAAM,OAAO,OAAO,UAAU;AAAA,MACzC,OAAO,EAAE,OAAO,IAAI,KAAK,MAAM;AAAA,IACjC,CAAC;AACD,QAAI,CAAC,KAAM,QAAO,gBAAgB,KAAK,OAAO,kBAAkB;AAEhE,UAAM,gBAAgB,MAAMF,QAAO;AAAA,MACjC,IAAI,KAAK;AAAA,MACT,KAAK;AAAA,IACP;AACA,QAAI,CAAC,cAAe,QAAO,gBAAgB,KAAK,OAAO,kBAAkB;AAEzE,UAAM,qBAAqB,MAAM,oBAAkB;AAAA,MACjD,KAAK;AAAA,IACP;AACA,QAAI,CAAC;AACH,aAAO,gBAAgB,KAAK,OAAO,mCAAmC;AAExE,UAAM,QAAQC,KAAI;AAAA,MAChB;AAAA,QACE,OAAO,KAAK;AAAA,QACZ,aAAa,KAAK;AAAA,QAClB,gBAAgB,mBAAmB,IAAI,CAAC,MAAW,EAAE,EAAE;AAAA,QACvD,WAAW,KAAK;AAAA,MAClB;AAAA,MACU,IAAI;AAAA,MACd;AAAA,QACE,SAAS,OAAO,KAAK,EAAE;AAAA,MACzB;AAAA,IACF;AAEA,UAAM,OAAO,OAAO,OAAO;AAAA,MACzB,OAAO;AAAA,QACL,IAAI,KAAK;AAAA,MACX;AAAA,MACA,MAAM;AAAA,QACJ;AAAA,MACF;AAAA,IACF,CAAC;AAED,oBAAgB,KAAK,MAAM,cAAc,EAAE,MAAM,CAAC;AAAA,EACpD,SAAS,GAAG;AACV,oBAAgB,KAAK,OAAO,IAAI,QAAW,CAAC;AAAA,EAC9C;AACF;AAEO,IAAME,WAA0B,OAAO,KAAc,QAAkB;AAC5E,MAAI;AACF,UAAM,OAAO,OAAO,OAAO;AAAA,MACzB,OAAO;AAAA,QACL,IAAI,IAAI,OAAO,KAAK;AAAA,MACtB;AAAA,MACA,MAAM;AAAA,QACJ,OAAO;AAAA,MACT;AAAA,IACF,CAAC;AAED,oBAAgB,KAAK,MAAM,YAAY;AAAA,EACzC,SAAS,GAAG;AACV,oBAAgB,KAAK,OAAO,IAAI,QAAW,CAAC;AAAA,EAC9C;AACF;AAEO,IAAM,iBAAiC,OAC5C,KACA,QACG;AACH,MAAI;AACF,UAAM,OAAO,MAAM,OAAO,OAAO,UAAU;AAAA,MACzC,OAAO,EAAE,OAAO,IAAI,KAAK,MAAM;AAAA,IACjC,CAAC;AACD,QAAI,CAAC,KAAM,iBAAgB,KAAK,OAAO,gBAAgB;AAAA,SAClD;AACH,YAAM,cAAc,mBAAmB,CAAC;AACxC,YAAM,SAAS,MAAMH,QAAO,KAAK,aAAuB,YAAY;AAEpE,YAAM,OAAO,OAAO,OAAO;AAAA,QACzB,MAAM,EAAE,UAAU,OAAO;AAAA,QACzB,OAAO,EAAE,IAAI,KAAK,GAAG;AAAA,MACvB,CAAC;AAED,YAAM,aAAa,MAAM,cAAU;AAAA,QACjC,IAAI,CAAC,KAAK,KAAK;AAAA,QACf,SAAS,sBAAsB,KAAK,KAAK;AAAA,QACzC,MAAM;AAAA,6CAC+B,KAAK,WAAW;AAAA,8CACf,KAAK,KAAK;AAAA,qDACH,WAAW;AAAA;AAAA,MAE1D,CAAC;AACD,UAAI,WAAY,OAAM,IAAI,MAAM,UAAU;AAAA,IAC5C;AAAA,EACF,SAAS,GAAG;AACV,oBAAgB,KAAK,OAAO,IAAI,QAAW,CAAC;AAAA,EAC9C;AACF;;;AC9JA,SAAS,UAAAI,eAAc;AAGvB,IAAMC,UAAiBC,QAAO;AAE9BD,QAAO,KAAK,YAAwB,MAAM;AAE1CA,QAAO,KAAK,YAAwBE,OAAM;AAE1CF,QAAO,IAAI,aAAa,cAA0BG,QAAO;AAEzDH,QAAO,KAAK,oBAAgC,cAAc;AAE1D,IAAO,iBAAQA;;;ACXR,IAAM,0BAA0C,OACrD,KACA,QACG;AACH,MAAI;AACF,UAAM,OAAO,OAAO,WAAW;AAAA,MAC7B,OAAO,EAAE,eAAe,IAAI,KAAK,cAAc;AAAA,IACjD,CAAC;AACD,oBAAgB,KAAK,MAAM,YAAY;AAAA,EACzC,SAAS,GAAG;AACV,oBAAgB,KAAK,OAAO,IAAI,QAAW,CAAC;AAAA,EAC9C;AACF;;;ACdA,SAAS,UAAAI,eAAc;AAEvB,IAAMC,UAAiBD,QAAO;AAE9BC,QAAO,OAAO,4BAAwC,uBAAuB;AAE7E,IAAO,mBAAQA;;;ACHf,OAAO,UAAU;AACjB,OAAO,aAAa;AAEpB,IAAM,MAAM,QAAQ;AAEpB,IAAI,IAAI,eAAe,CAAC;AAExB,IAAM,OAAiB,IAAI;AAC3B,IAAI,IAAI,KAAK,CAAC;AACd,IAAI,IAAI,QAAQ,KAAK,CAAC;AAEtB,IAAI,IAAI,UAAU,aAAW;AAC7B,IAAI,IAAI,WAAW,cAAY;AAC/B,IAAI,IAAI,aAAa,gBAAc;AAEnC,IAAI,OAAO,MAAM,CAAC,MAAM;AACtB,MAAI,EAAG,SAAQ,MAAM,CAAC;AAAA,MACjB,SAAQ,IAAI,2BAA2B,IAAI,EAAE;AACpD,CAAC;","names":["nodemailer","nodemailer","jwt","jwt","bcrypt","jwt","signIn","signOut","Router","router","Router","signIn","signOut","Router","router"]}